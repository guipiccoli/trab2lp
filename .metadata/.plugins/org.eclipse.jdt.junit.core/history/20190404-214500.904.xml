<?xml version="1.0" encoding="UTF-8"?><testrun name="LispParsingTest" project="org.xtext.t2.lisp.tests" tests="7" started="7" failures="1" errors="0" ignored="0">
  <testsuite name="org.xtext.t2.lisp.tests.LispParsingTest" time="1.172" displayname="LispParsingTest" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]">
    <testcase name="loadModel1" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="1.141" displayname="loadModel1()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel1()]"/>
    <testcase name="loadModel2" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.0" displayname="loadModel2()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel2()]"/>
    <testcase name="loadModel3" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.016" displayname="loadModel3()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel3()]"/>
    <testcase name="loadModel4" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.0" displayname="loadModel4()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel4()]"/>
    <testcase name="loadModel5" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.0" displayname="loadModel5()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel5()]"/>
    <testcase name="loadModel6" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.015" displayname="loadModel6()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel6()]">
      <failure>org.opentest4j.AssertionFailedError: Unexpected errors: XtextSyntaxDiagnostic: null:1 missing RULE_ID at '1' ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;&#13;
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)&#13;
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:42)&#13;
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:146)&#13;
	at org.xtext.t2.lisp.tests.LispParsingTest.loadModel6(LispParsingTest.java:162)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:436)&#13;
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:170)&#13;
	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:166)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:113)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:58)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:112)&#13;
	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$2(HierarchicalTestExecutor.java:120)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)&#13;
	at java.util.Iterator.forEachRemaining(Unknown Source)&#13;
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline.forEach(Unknown Source)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:120)&#13;
	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$2(HierarchicalTestExecutor.java:120)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)&#13;
	at java.util.Iterator.forEachRemaining(Unknown Source)&#13;
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline.forEach(Unknown Source)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:120)&#13;
	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:55)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)&#13;
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:89)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="loadModel" classname="org.xtext.t2.lisp.tests.LispParsingTest" time="0.0" displayname="loadModel()" uniqueid="[engine:junit-jupiter]/[class:org.xtext.t2.lisp.tests.LispParsingTest]/[method:loadModel()]"/>
  </testsuite>
</testrun>
