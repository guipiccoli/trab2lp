/*
 * generated by Xtext 2.15.0
 */
package org.xtext.t2.lisp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.t2.lisp.ide.contentassist.antlr.internal.InternalLispParser;
import org.xtext.t2.lisp.services.LispGrammarAccess;

public class LispParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LispGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LispGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
			builder.put(grammarAccess.getDefineAccess().getAlternatives(), "rule__Define__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getNumerosAccess().getAlternatives(), "rule__Numeros__Alternatives");
			builder.put(grammarAccess.getOperacoesAccess().getAlternatives(), "rule__Operacoes__Alternatives");
			builder.put(grammarAccess.getBeginAccess().getGroup(), "rule__Begin__Group__0");
			builder.put(grammarAccess.getDefineAccess().getGroup_0(), "rule__Define__Group_0__0");
			builder.put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getDecimalAccess().getGroup(), "rule__Decimal__Group__0");
			builder.put(grammarAccess.getModelAccess().getBeginAssignment_0(), "rule__Model__BeginAssignment_0");
			builder.put(grammarAccess.getModelAccess().getDefinitionAssignment_1(), "rule__Model__DefinitionAssignment_1");
			builder.put(grammarAccess.getBeginAccess().getNameAssignment_1(), "rule__Begin__NameAssignment_1");
			builder.put(grammarAccess.getBeginAccess().getDefinitionAssignment_2(), "rule__Begin__DefinitionAssignment_2");
			builder.put(grammarAccess.getDefineAccess().getNameAssignment_0_1(), "rule__Define__NameAssignment_0_1");
			builder.put(grammarAccess.getDefineAccess().getExpressionAssignment_0_2(), "rule__Define__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getDefineAccess().getListAssignment_1(), "rule__Define__ListAssignment_1");
			builder.put(grammarAccess.getListAccess().getNameAssignment_2(), "rule__List__NameAssignment_2");
			builder.put(grammarAccess.getListAccess().getNumerosAssignment_3(), "rule__List__NumerosAssignment_3");
			builder.put(grammarAccess.getExpressionAccess().getOperacoesAssignment_0_1(), "rule__Expression__OperacoesAssignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getPrimeiroAssignment_0_2(), "rule__Expression__PrimeiroAssignment_0_2");
			builder.put(grammarAccess.getOperacoesAccess().getValueAssignment_0(), "rule__Operacoes__ValueAssignment_0");
			builder.put(grammarAccess.getInteirosAccess().getValueAssignment(), "rule__Inteiros__ValueAssignment");
			builder.put(grammarAccess.getDecimalAccess().getValueAssignment_0(), "rule__Decimal__ValueAssignment_0");
			builder.put(grammarAccess.getDecimalAccess().getValueAssignment_2(), "rule__Decimal__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LispGrammarAccess grammarAccess;

	@Override
	protected InternalLispParser createParser() {
		InternalLispParser result = new InternalLispParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LispGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LispGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
