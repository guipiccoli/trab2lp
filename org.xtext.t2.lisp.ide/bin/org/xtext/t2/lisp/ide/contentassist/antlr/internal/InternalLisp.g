/*
 * generated by Xtext 2.17.0
 */
grammar InternalLisp;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.t2.lisp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.t2.lisp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.t2.lisp.services.LispGrammarAccess;

}
@parser::members {
	private LispGrammarAccess grammarAccess;

	public void setGrammarAccess(LispGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getAlternatives()); }
		(rule__Model__Alternatives)
		{ after(grammarAccess.getModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBegin
entryRuleBegin
:
{ before(grammarAccess.getBeginRule()); }
	 ruleBegin
{ after(grammarAccess.getBeginRule()); } 
	 EOF 
;

// Rule Begin
ruleBegin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeginAccess().getGroup()); }
		(rule__Begin__Group__0)
		{ after(grammarAccess.getBeginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefine
entryRuleDefine
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineAccess().getGroup()); }
		(rule__Define__Group__0)
		{ after(grammarAccess.getDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getDigitZeroKeyword()); }
		'0'
		{ after(grammarAccess.getCommandAccess().getDigitZeroKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumeros
entryRuleNumeros
:
{ before(grammarAccess.getNumerosRule()); }
	 ruleNumeros
{ after(grammarAccess.getNumerosRule()); } 
	 EOF 
;

// Rule Numeros
ruleNumeros 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumerosAccess().getAlternatives()); }
		(rule__Numeros__Alternatives)
		{ after(grammarAccess.getNumerosAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperacoes
entryRuleOperacoes
:
{ before(grammarAccess.getOperacoesRule()); }
	 ruleOperacoes
{ after(grammarAccess.getOperacoesRule()); } 
	 EOF 
;

// Rule Operacoes
ruleOperacoes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperacoesAccess().getAlternatives()); }
		(rule__Operacoes__Alternatives)
		{ after(grammarAccess.getOperacoesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteiros
entryRuleInteiros
:
{ before(grammarAccess.getInteirosRule()); }
	 ruleInteiros
{ after(grammarAccess.getInteirosRule()); } 
	 EOF 
;

// Rule Inteiros
ruleInteiros 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInteirosAccess().getValueAssignment()); }
		(rule__Inteiros__ValueAssignment)
		{ after(grammarAccess.getInteirosAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecimal
entryRuleDecimal
:
{ before(grammarAccess.getDecimalRule()); }
	 ruleDecimal
{ after(grammarAccess.getDecimalRule()); } 
	 EOF 
;

// Rule Decimal
ruleDecimal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalAccess().getGroup()); }
		(rule__Decimal__Group__0)
		{ after(grammarAccess.getDecimalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNumerosAssignment_0()); }
		(rule__Model__NumerosAssignment_0)*
		{ after(grammarAccess.getModelAccess().getNumerosAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getBeginAssignment_1()); }
		(rule__Model__BeginAssignment_1)
		{ after(grammarAccess.getModelAccess().getBeginAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getExpressionAssignment_2()); }
		(rule__Model__ExpressionAssignment_2)
		{ after(grammarAccess.getModelAccess().getExpressionAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getDefineAssignment_3()); }
		(rule__Model__DefineAssignment_3)
		{ after(grammarAccess.getModelAccess().getDefineAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeros__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumerosAccess().getInteirosParserRuleCall_0()); }
		ruleInteiros
		{ after(grammarAccess.getNumerosAccess().getInteirosParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumerosAccess().getDecimalParserRuleCall_1()); }
		ruleDecimal
		{ after(grammarAccess.getNumerosAccess().getDecimalParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacoes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperacoesAccess().getValueAssignment_0()); }
		(rule__Operacoes__ValueAssignment_0)
		{ after(grammarAccess.getOperacoesAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperacoesAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOperacoesAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperacoesAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getOperacoesAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperacoesAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getOperacoesAccess().getSolidusKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperacoesAccess().getSquareKeyword_4()); }
		'square'
		{ after(grammarAccess.getOperacoesAccess().getSquareKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__0__Impl
	rule__Begin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getBeginKeyword_0()); }
	'begin'
	{ after(grammarAccess.getBeginAccess().getBeginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getNameAssignment_1()); }
	(rule__Begin__NameAssignment_1)
	{ after(grammarAccess.getBeginAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getDefineKeyword_0()); }
	'define'
	{ after(grammarAccess.getDefineAccess().getDefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getNameAssignment_1()); }
	(rule__Define__NameAssignment_1)
	{ after(grammarAccess.getDefineAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getCommandAssignment_2()); }
	(rule__Define__CommandAssignment_2)
	{ after(grammarAccess.getDefineAccess().getCommandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOperacoesAssignment_1()); }
	(rule__Expression__OperacoesAssignment_1)
	{ after(grammarAccess.getExpressionAccess().getOperacoesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__2__Impl
	rule__Expression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getPrimeiroAssignment_2()); }
	(rule__Expression__PrimeiroAssignment_2)*
	{ after(grammarAccess.getExpressionAccess().getPrimeiroAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__0__Impl
	rule__Decimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getValueAssignment_0()); }
	(rule__Decimal__ValueAssignment_0)
	{ after(grammarAccess.getDecimalAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__1__Impl
	rule__Decimal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getDecimalAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getValueAssignment_2()); }
	(rule__Decimal__ValueAssignment_2)
	{ after(grammarAccess.getDecimalAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NumerosAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNumerosNumerosParserRuleCall_0_0()); }
		ruleNumeros
		{ after(grammarAccess.getModelAccess().getNumerosNumerosParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__BeginAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_1_0()); }
		ruleBegin
		{ after(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getModelAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DefineAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDefineDefineParserRuleCall_3_0()); }
		ruleDefine
		{ after(grammarAccess.getModelAccess().getDefineDefineParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeginAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBeginAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__CommandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getCommandCommandParserRuleCall_2_0()); }
		ruleCommand
		{ after(grammarAccess.getDefineAccess().getCommandCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperacoesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperacoesOperacoesParserRuleCall_1_0()); }
		ruleOperacoes
		{ after(grammarAccess.getExpressionAccess().getOperacoesOperacoesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__PrimeiroAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getPrimeiroNumerosParserRuleCall_2_0()); }
		ruleNumeros
		{ after(grammarAccess.getExpressionAccess().getPrimeiroNumerosParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacoes__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0()); }
		(
			{ before(grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0()); }
			'+'
			{ after(grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0()); }
		)
		{ after(grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inteiros__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInteirosAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getInteirosAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
