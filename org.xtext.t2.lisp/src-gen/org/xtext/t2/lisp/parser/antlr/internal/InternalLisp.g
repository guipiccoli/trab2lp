/*
 * generated by Xtext 2.17.0
 */
grammar InternalLisp;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.t2.lisp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.t2.lisp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.t2.lisp.services.LispGrammarAccess;

}

@parser::members {

 	private LispGrammarAccess grammarAccess;

    public InternalLispParser(TokenStream input, LispGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected LispGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_0_0());
				}
				lv_begin_0_0=ruleBegin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"begin",
						lv_begin_0_0,
						"org.xtext.t2.lisp.Lisp.Begin");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDefinitionDefinitionParserRuleCall_1_0());
				}
				lv_definition_1_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"definition",
						lv_definition_1_0,
						"org.xtext.t2.lisp.Lisp.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCondicaoCondicaoParserRuleCall_2_0());
				}
				lv_condicao_2_0=ruleCondicao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"condicao",
						lv_condicao_2_0,
						"org.xtext.t2.lisp.Lisp.Condicao");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getNumerosParserRuleCall_0());
		}
		this_Numeros_0=ruleNumeros
		{
			$current = $this_Numeros_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getDefineParserRuleCall_2());
		}
		this_Define_2=ruleDefine
		{
			$current = $this_Define_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getListParserRuleCall_3());
		}
		this_List_3=ruleList
		{
			$current = $this_List_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBegin
entryRuleBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeginRule()); }
	iv_ruleBegin=ruleBegin
	{ $current=$iv_ruleBegin.current; }
	EOF;

// Rule Begin
ruleBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getBeginAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBeginAccess().getDefinitionDefinitionParserRuleCall_1_0());
				}
				lv_definition_1_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBeginRule());
					}
					set(
						$current,
						"definition",
						lv_definition_1_0,
						"org.xtext.t2.lisp.Lisp.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current; }
	EOF;

// Rule Define
ruleDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='define'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getDefineKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefineAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefineRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"org.xtext.t2.lisp.Lisp.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefineAccess().getListListParserRuleCall_1_1_0());
					}
					lv_list_2_0=ruleList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefineRule());
						}
						set(
							$current,
							"list",
							lv_list_2_0,
							"org.xtext.t2.lisp.Lisp.List");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefineAccess().getCondicaoCondicaoParserRuleCall_1_2_0());
					}
					lv_condicao_3_0=ruleCondicao
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefineRule());
						}
						set(
							$current,
							"condicao",
							lv_condicao_3_0,
							"org.xtext.t2.lisp.Lisp.Condicao");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='list'
		{
			newLeafNode(otherlv_1, grammarAccess.getListAccess().getListKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getNumerosNumerosParserRuleCall_2_0());
				}
				lv_numeros_2_0=ruleNumeros
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					add(
						$current,
						"numeros",
						lv_numeros_2_0,
						"org.xtext.t2.lisp.Lisp.Numeros");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getOperacoesOperacoesParserRuleCall_0_1_0());
					}
					lv_operacoes_1_0=ruleOperacoes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"operacoes",
							lv_operacoes_1_0,
							"org.xtext.t2.lisp.Lisp.Operacoes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getPrimeiroRecursionParserRuleCall_0_2_0());
					}
					lv_primeiro_2_0=ruleRecursion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"primeiro",
							lv_primeiro_2_0,
							"org.xtext.t2.lisp.Lisp.Recursion");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleNumeros
entryRuleNumeros returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumerosRule()); }
	iv_ruleNumeros=ruleNumeros
	{ $current=$iv_ruleNumeros.current; }
	EOF;

// Rule Numeros
ruleNumeros returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumerosAccess().getInteirosParserRuleCall_0());
		}
		this_Inteiros_0=ruleInteiros
		{
			$current = $this_Inteiros_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumerosAccess().getDecimalParserRuleCall_1());
		}
		this_Decimal_1=ruleDecimal
		{
			$current = $this_Decimal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperacoes
entryRuleOperacoes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperacoesRule()); }
	iv_ruleOperacoes=ruleOperacoes
	{ $current=$iv_ruleOperacoes.current; }
	EOF;

// Rule Operacoes
ruleOperacoes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='+'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperacoesRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "+");
				}
			)
		)
		    |
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getOperacoesAccess().getHyphenMinusKeyword_1());
		}
		    |
		otherlv_2='*'
		{
			newLeafNode(otherlv_2, grammarAccess.getOperacoesAccess().getAsteriskKeyword_2());
		}
		    |
		otherlv_3='/'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperacoesAccess().getSolidusKeyword_3());
		}
		    |
		otherlv_4='sq'
		{
			newLeafNode(otherlv_4, grammarAccess.getOperacoesAccess().getSqKeyword_4());
		}
	)
;

// Entry rule entryRuleCondicao
entryRuleCondicao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondicaoRule()); }
	iv_ruleCondicao=ruleCondicao
	{ $current=$iv_ruleCondicao.current; }
	EOF;

// Rule Condicao
ruleCondicao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCondicaoAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getCondicaoAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCondicaoAccess().getCondicaoRecursionParserRuleCall_2_0());
				}
				lv_condicao_2_0=ruleRecursion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondicaoRule());
					}
					add(
						$current,
						"condicao",
						lv_condicao_2_0,
						"org.xtext.t2.lisp.Lisp.Recursion");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCondicaoAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleInteiros
entryRuleInteiros returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteirosRule()); }
	iv_ruleInteiros=ruleInteiros
	{ $current=$iv_ruleInteiros.current; }
	EOF;

// Rule Inteiros
ruleInteiros returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getInteirosAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInteirosRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleDecimal
entryRuleDecimal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalRule()); }
	iv_ruleDecimal=ruleDecimal
	{ $current=$iv_ruleDecimal.current; }
	EOF;

// Rule Decimal
ruleDecimal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecimalAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getDecimalAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRecursion
entryRuleRecursion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecursionRule()); }
	iv_ruleRecursion=ruleRecursion
	{ $current=$iv_ruleRecursion.current; }
	EOF;

// Rule Recursion
ruleRecursion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_recursionID_0_0=RULE_ID
				{
					newLeafNode(lv_recursionID_0_0, grammarAccess.getRecursionAccess().getRecursionIDIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecursionRule());
					}
					setWithLastConsumed(
						$current,
						"recursionID",
						lv_recursionID_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRecursionAccess().getRecursionIntNumerosParserRuleCall_1_0());
				}
				lv_recursionInt_1_0=ruleNumeros
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecursionRule());
					}
					set(
						$current,
						"recursionInt",
						lv_recursionInt_1_0,
						"org.xtext.t2.lisp.Lisp.Numeros");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_recursionString_2_0=RULE_STRING
				{
					newLeafNode(lv_recursionString_2_0, grammarAccess.getRecursionAccess().getRecursionStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecursionRule());
					}
					setWithLastConsumed(
						$current,
						"recursionString",
						lv_recursionString_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRecursionAccess().getRecursionDefinitionDefinitionParserRuleCall_3_0());
				}
				lv_recursionDefinition_3_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecursionRule());
					}
					set(
						$current,
						"recursionDefinition",
						lv_recursionDefinition_3_0,
						"org.xtext.t2.lisp.Lisp.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
