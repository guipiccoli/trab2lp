/*
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.t2.lisp.services.LispGrammarAccess;

@SuppressWarnings("all")
public class LispSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LispGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Identifier_FullStopFullStopFullStopKeyword_3_or_HyphenMinusKeyword_2_or_PlusSignKeyword_1;
	protected AbstractElementAlias match_Subsequent_FullStopKeyword_2_or_HyphenMinusKeyword_4_or_PlusSignKeyword_3;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LispGrammarAccess) access;
		match_Identifier_FullStopFullStopFullStopKeyword_3_or_HyphenMinusKeyword_2_or_PlusSignKeyword_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIdentifierAccess().getFullStopFullStopFullStopKeyword_3()), new TokenAlias(false, false, grammarAccess.getIdentifierAccess().getHyphenMinusKeyword_2()), new TokenAlias(false, false, grammarAccess.getIdentifierAccess().getPlusSignKeyword_1()));
		match_Subsequent_FullStopKeyword_2_or_HyphenMinusKeyword_4_or_PlusSignKeyword_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubsequentAccess().getFullStopKeyword_2()), new TokenAlias(false, false, grammarAccess.getSubsequentAccess().getHyphenMinusKeyword_4()), new TokenAlias(false, false, grammarAccess.getSubsequentAccess().getPlusSignKeyword_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Identifier_FullStopFullStopFullStopKeyword_3_or_HyphenMinusKeyword_2_or_PlusSignKeyword_1.equals(syntax))
				emit_Identifier_FullStopFullStopFullStopKeyword_3_or_HyphenMinusKeyword_2_or_PlusSignKeyword_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subsequent_FullStopKeyword_2_or_HyphenMinusKeyword_4_or_PlusSignKeyword_3.equals(syntax))
				emit_Subsequent_FullStopKeyword_2_or_HyphenMinusKeyword_4_or_PlusSignKeyword_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '+' | '-' | '...'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Identifier_FullStopFullStopFullStopKeyword_3_or_HyphenMinusKeyword_2_or_PlusSignKeyword_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.' | '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Subsequent_FullStopKeyword_2_or_HyphenMinusKeyword_4_or_PlusSignKeyword_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
