/*
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.t2.lisp.lisp.Begin;
import org.xtext.t2.lisp.lisp.Decimal;
import org.xtext.t2.lisp.lisp.Define;
import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.Inteiros;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Model;
import org.xtext.t2.lisp.lisp.Operacoes;
import org.xtext.t2.lisp.services.LispGrammarAccess;

@SuppressWarnings("all")
public class LispSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LispGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LispPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LispPackage.BEGIN:
				sequence_Begin(context, (Begin) semanticObject); 
				return; 
			case LispPackage.DECIMAL:
				sequence_Decimal(context, (Decimal) semanticObject); 
				return; 
			case LispPackage.DEFINE:
				sequence_Define(context, (Define) semanticObject); 
				return; 
			case LispPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case LispPackage.INTEIROS:
				sequence_Inteiros(context, (Inteiros) semanticObject); 
				return; 
			case LispPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case LispPackage.OPERACOES:
				sequence_Operacoes(context, (Operacoes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Begin returns Begin
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Begin(ISerializationContext context, Begin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LispPackage.Literals.BEGIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LispPackage.Literals.BEGIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeginAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Numeros returns Decimal
	 *     Decimal returns Decimal
	 *
	 * Constraint:
	 *     (value=INT value=INT)
	 */
	protected void sequence_Decimal(ISerializationContext context, Decimal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Define returns Define
	 *
	 * Constraint:
	 *     (name=ID command=Command)
	 */
	protected void sequence_Define(ISerializationContext context, Define semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LispPackage.Literals.DEFINE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LispPackage.Literals.DEFINE__NAME));
			if (transientValues.isValueTransient(semanticObject, LispPackage.Literals.DEFINE__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LispPackage.Literals.DEFINE__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDefineAccess().getCommandCommandParserRuleCall_2_0(), semanticObject.getCommand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (operacoes=Operacoes primeiro=Numeros*)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Numeros returns Inteiros
	 *     Inteiros returns Inteiros
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Inteiros(ISerializationContext context, Inteiros semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LispPackage.Literals.NUMEROS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LispPackage.Literals.NUMEROS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteirosAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (numeros+=Numeros+ | begin=Begin | expression=Expression | define=Define)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operacoes returns Operacoes
	 *
	 * Constraint:
	 *     value='+'
	 */
	protected void sequence_Operacoes(ISerializationContext context, Operacoes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LispPackage.Literals.OPERACOES__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LispPackage.Literals.OPERACOES__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperacoesAccess().getValuePlusSignKeyword_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
