/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Set;
import org.xtext.t2.lisp.lisp.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Set</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.SetImpl#getVariable3 <em>Variable3</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.SetImpl#getExpression10 <em>Expression10</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SetImpl extends MinimalEObjectImpl.Container implements Set
{
  /**
   * The cached value of the '{@link #getVariable3() <em>Variable3</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable3()
   * @generated
   * @ordered
   */
  protected Variable variable3;

  /**
   * The cached value of the '{@link #getExpression10() <em>Expression10</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression10()
   * @generated
   * @ordered
   */
  protected Expression expression10;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.SET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable3()
  {
    return variable3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable3(Variable newVariable3, NotificationChain msgs)
  {
    Variable oldVariable3 = variable3;
    variable3 = newVariable3;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.SET__VARIABLE3, oldVariable3, newVariable3);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable3(Variable newVariable3)
  {
    if (newVariable3 != variable3)
    {
      NotificationChain msgs = null;
      if (variable3 != null)
        msgs = ((InternalEObject)variable3).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.SET__VARIABLE3, null, msgs);
      if (newVariable3 != null)
        msgs = ((InternalEObject)newVariable3).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.SET__VARIABLE3, null, msgs);
      msgs = basicSetVariable3(newVariable3, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.SET__VARIABLE3, newVariable3, newVariable3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression10()
  {
    return expression10;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression10(Expression newExpression10, NotificationChain msgs)
  {
    Expression oldExpression10 = expression10;
    expression10 = newExpression10;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.SET__EXPRESSION10, oldExpression10, newExpression10);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression10(Expression newExpression10)
  {
    if (newExpression10 != expression10)
    {
      NotificationChain msgs = null;
      if (expression10 != null)
        msgs = ((InternalEObject)expression10).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.SET__EXPRESSION10, null, msgs);
      if (newExpression10 != null)
        msgs = ((InternalEObject)newExpression10).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.SET__EXPRESSION10, null, msgs);
      msgs = basicSetExpression10(newExpression10, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.SET__EXPRESSION10, newExpression10, newExpression10));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.SET__VARIABLE3:
        return basicSetVariable3(null, msgs);
      case LispPackage.SET__EXPRESSION10:
        return basicSetExpression10(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.SET__VARIABLE3:
        return getVariable3();
      case LispPackage.SET__EXPRESSION10:
        return getExpression10();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.SET__VARIABLE3:
        setVariable3((Variable)newValue);
        return;
      case LispPackage.SET__EXPRESSION10:
        setExpression10((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.SET__VARIABLE3:
        setVariable3((Variable)null);
        return;
      case LispPackage.SET__EXPRESSION10:
        setExpression10((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.SET__VARIABLE3:
        return variable3 != null;
      case LispPackage.SET__EXPRESSION10:
        return expression10 != null;
    }
    return super.eIsSet(featureID);
  }

} //SetImpl
