/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Decimal;
import org.xtext.t2.lisp.lisp.Digit;
import org.xtext.t2.lisp.lisp.LispPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Number</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.NumberImpl#getDigit <em>Digit</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.NumberImpl#getDecimal <em>Decimal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NumberImpl extends MinimalEObjectImpl.Container implements org.xtext.t2.lisp.lisp.Number
{
  /**
   * The cached value of the '{@link #getDigit() <em>Digit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDigit()
   * @generated
   * @ordered
   */
  protected Digit digit;

  /**
   * The cached value of the '{@link #getDecimal() <em>Decimal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecimal()
   * @generated
   * @ordered
   */
  protected Decimal decimal;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NumberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.NUMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Digit getDigit()
  {
    return digit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDigit(Digit newDigit, NotificationChain msgs)
  {
    Digit oldDigit = digit;
    digit = newDigit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.NUMBER__DIGIT, oldDigit, newDigit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDigit(Digit newDigit)
  {
    if (newDigit != digit)
    {
      NotificationChain msgs = null;
      if (digit != null)
        msgs = ((InternalEObject)digit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.NUMBER__DIGIT, null, msgs);
      if (newDigit != null)
        msgs = ((InternalEObject)newDigit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.NUMBER__DIGIT, null, msgs);
      msgs = basicSetDigit(newDigit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.NUMBER__DIGIT, newDigit, newDigit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decimal getDecimal()
  {
    return decimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecimal(Decimal newDecimal, NotificationChain msgs)
  {
    Decimal oldDecimal = decimal;
    decimal = newDecimal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.NUMBER__DECIMAL, oldDecimal, newDecimal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecimal(Decimal newDecimal)
  {
    if (newDecimal != decimal)
    {
      NotificationChain msgs = null;
      if (decimal != null)
        msgs = ((InternalEObject)decimal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.NUMBER__DECIMAL, null, msgs);
      if (newDecimal != null)
        msgs = ((InternalEObject)newDecimal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.NUMBER__DECIMAL, null, msgs);
      msgs = basicSetDecimal(newDecimal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.NUMBER__DECIMAL, newDecimal, newDecimal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.NUMBER__DIGIT:
        return basicSetDigit(null, msgs);
      case LispPackage.NUMBER__DECIMAL:
        return basicSetDecimal(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.NUMBER__DIGIT:
        return getDigit();
      case LispPackage.NUMBER__DECIMAL:
        return getDecimal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.NUMBER__DIGIT:
        setDigit((Digit)newValue);
        return;
      case LispPackage.NUMBER__DECIMAL:
        setDecimal((Decimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.NUMBER__DIGIT:
        setDigit((Digit)null);
        return;
      case LispPackage.NUMBER__DECIMAL:
        setDecimal((Decimal)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.NUMBER__DIGIT:
        return digit != null;
      case LispPackage.NUMBER__DECIMAL:
        return decimal != null;
    }
    return super.eIsSet(featureID);
  }

} //NumberImpl
