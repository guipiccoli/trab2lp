/**
 * generated by Xtext 2.15.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Condicao;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Recursion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condicao</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.CondicaoImpl#getCondicao <em>Condicao</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.CondicaoImpl#getTrue <em>True</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.CondicaoImpl#getFalso <em>Falso</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CondicaoImpl extends MinimalEObjectImpl.Container implements Condicao
{
  /**
   * The cached value of the '{@link #getCondicao() <em>Condicao</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondicao()
   * @generated
   * @ordered
   */
  protected Recursion condicao;

  /**
   * The cached value of the '{@link #getTrue() <em>True</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrue()
   * @generated
   * @ordered
   */
  protected Recursion true_;

  /**
   * The cached value of the '{@link #getFalso() <em>Falso</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalso()
   * @generated
   * @ordered
   */
  protected Recursion falso;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CondicaoImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.CONDICAO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recursion getCondicao()
  {
    return condicao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondicao(Recursion newCondicao, NotificationChain msgs)
  {
    Recursion oldCondicao = condicao;
    condicao = newCondicao;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__CONDICAO, oldCondicao, newCondicao);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondicao(Recursion newCondicao)
  {
    if (newCondicao != condicao)
    {
      NotificationChain msgs = null;
      if (condicao != null)
        msgs = ((InternalEObject)condicao).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__CONDICAO, null, msgs);
      if (newCondicao != null)
        msgs = ((InternalEObject)newCondicao).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__CONDICAO, null, msgs);
      msgs = basicSetCondicao(newCondicao, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__CONDICAO, newCondicao, newCondicao));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recursion getTrue()
  {
    return true_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrue(Recursion newTrue, NotificationChain msgs)
  {
    Recursion oldTrue = true_;
    true_ = newTrue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__TRUE, oldTrue, newTrue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrue(Recursion newTrue)
  {
    if (newTrue != true_)
    {
      NotificationChain msgs = null;
      if (true_ != null)
        msgs = ((InternalEObject)true_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__TRUE, null, msgs);
      if (newTrue != null)
        msgs = ((InternalEObject)newTrue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__TRUE, null, msgs);
      msgs = basicSetTrue(newTrue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__TRUE, newTrue, newTrue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recursion getFalso()
  {
    return falso;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFalso(Recursion newFalso, NotificationChain msgs)
  {
    Recursion oldFalso = falso;
    falso = newFalso;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__FALSO, oldFalso, newFalso);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFalso(Recursion newFalso)
  {
    if (newFalso != falso)
    {
      NotificationChain msgs = null;
      if (falso != null)
        msgs = ((InternalEObject)falso).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__FALSO, null, msgs);
      if (newFalso != null)
        msgs = ((InternalEObject)newFalso).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.CONDICAO__FALSO, null, msgs);
      msgs = basicSetFalso(newFalso, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.CONDICAO__FALSO, newFalso, newFalso));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.CONDICAO__CONDICAO:
        return basicSetCondicao(null, msgs);
      case LispPackage.CONDICAO__TRUE:
        return basicSetTrue(null, msgs);
      case LispPackage.CONDICAO__FALSO:
        return basicSetFalso(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.CONDICAO__CONDICAO:
        return getCondicao();
      case LispPackage.CONDICAO__TRUE:
        return getTrue();
      case LispPackage.CONDICAO__FALSO:
        return getFalso();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.CONDICAO__CONDICAO:
        setCondicao((Recursion)newValue);
        return;
      case LispPackage.CONDICAO__TRUE:
        setTrue((Recursion)newValue);
        return;
      case LispPackage.CONDICAO__FALSO:
        setFalso((Recursion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.CONDICAO__CONDICAO:
        setCondicao((Recursion)null);
        return;
      case LispPackage.CONDICAO__TRUE:
        setTrue((Recursion)null);
        return;
      case LispPackage.CONDICAO__FALSO:
        setFalso((Recursion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.CONDICAO__CONDICAO:
        return condicao != null;
      case LispPackage.CONDICAO__TRUE:
        return true_ != null;
      case LispPackage.CONDICAO__FALSO:
        return falso != null;
    }
    return super.eIsSet(featureID);
  }

} //CondicaoImpl
