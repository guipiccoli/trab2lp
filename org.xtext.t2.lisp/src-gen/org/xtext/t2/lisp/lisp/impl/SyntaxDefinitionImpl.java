/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.Keyword;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.SyntaxDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Syntax Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.SyntaxDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.SyntaxDefinitionImpl#getKeyword <em>Keyword</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.SyntaxDefinitionImpl#getTransformerExpression <em>Transformer Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SyntaxDefinitionImpl extends MinimalEObjectImpl.Container implements SyntaxDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getKeyword() <em>Keyword</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword()
   * @generated
   * @ordered
   */
  protected Keyword keyword;

  /**
   * The cached value of the '{@link #getTransformerExpression() <em>Transformer Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransformerExpression()
   * @generated
   * @ordered
   */
  protected Expression transformerExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SyntaxDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.SYNTAX_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.SYNTAX_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Keyword getKeyword()
  {
    return keyword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetKeyword(Keyword newKeyword, NotificationChain msgs)
  {
    Keyword oldKeyword = keyword;
    keyword = newKeyword;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.SYNTAX_DEFINITION__KEYWORD, oldKeyword, newKeyword);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyword(Keyword newKeyword)
  {
    if (newKeyword != keyword)
    {
      NotificationChain msgs = null;
      if (keyword != null)
        msgs = ((InternalEObject)keyword).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.SYNTAX_DEFINITION__KEYWORD, null, msgs);
      if (newKeyword != null)
        msgs = ((InternalEObject)newKeyword).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.SYNTAX_DEFINITION__KEYWORD, null, msgs);
      msgs = basicSetKeyword(newKeyword, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.SYNTAX_DEFINITION__KEYWORD, newKeyword, newKeyword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTransformerExpression()
  {
    return transformerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransformerExpression(Expression newTransformerExpression, NotificationChain msgs)
  {
    Expression oldTransformerExpression = transformerExpression;
    transformerExpression = newTransformerExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION, oldTransformerExpression, newTransformerExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransformerExpression(Expression newTransformerExpression)
  {
    if (newTransformerExpression != transformerExpression)
    {
      NotificationChain msgs = null;
      if (transformerExpression != null)
        msgs = ((InternalEObject)transformerExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION, null, msgs);
      if (newTransformerExpression != null)
        msgs = ((InternalEObject)newTransformerExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION, null, msgs);
      msgs = basicSetTransformerExpression(newTransformerExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION, newTransformerExpression, newTransformerExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.SYNTAX_DEFINITION__KEYWORD:
        return basicSetKeyword(null, msgs);
      case LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION:
        return basicSetTransformerExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.SYNTAX_DEFINITION__NAME:
        return getName();
      case LispPackage.SYNTAX_DEFINITION__KEYWORD:
        return getKeyword();
      case LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION:
        return getTransformerExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.SYNTAX_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case LispPackage.SYNTAX_DEFINITION__KEYWORD:
        setKeyword((Keyword)newValue);
        return;
      case LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION:
        setTransformerExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.SYNTAX_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LispPackage.SYNTAX_DEFINITION__KEYWORD:
        setKeyword((Keyword)null);
        return;
      case LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION:
        setTransformerExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.SYNTAX_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LispPackage.SYNTAX_DEFINITION__KEYWORD:
        return keyword != null;
      case LispPackage.SYNTAX_DEFINITION__TRANSFORMER_EXPRESSION:
        return transformerExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //SyntaxDefinitionImpl
