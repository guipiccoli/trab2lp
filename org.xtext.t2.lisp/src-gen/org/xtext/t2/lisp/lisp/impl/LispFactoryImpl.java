/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.t2.lisp.lisp.Body;
import org.xtext.t2.lisp.lisp.Constant;
import org.xtext.t2.lisp.lisp.Decimal;
import org.xtext.t2.lisp.lisp.Define;
import org.xtext.t2.lisp.lisp.Definition;
import org.xtext.t2.lisp.lisp.Digit;
import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.Form;
import org.xtext.t2.lisp.lisp.Formals;
import org.xtext.t2.lisp.lisp.Identifier;
import org.xtext.t2.lisp.lisp.If;
import org.xtext.t2.lisp.lisp.Initial;
import org.xtext.t2.lisp.lisp.Keyword;
import org.xtext.t2.lisp.lisp.Letter;
import org.xtext.t2.lisp.lisp.LispFactory;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Model;
import org.xtext.t2.lisp.lisp.Set;
import org.xtext.t2.lisp.lisp.Subsequent;
import org.xtext.t2.lisp.lisp.SyntaxBinding;
import org.xtext.t2.lisp.lisp.SyntaxDefinition;
import org.xtext.t2.lisp.lisp.Variable;
import org.xtext.t2.lisp.lisp.VariableDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LispFactoryImpl extends EFactoryImpl implements LispFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LispFactory init()
  {
    try
    {
      LispFactory theLispFactory = (LispFactory)EPackage.Registry.INSTANCE.getEFactory(LispPackage.eNS_URI);
      if (theLispFactory != null)
      {
        return theLispFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LispFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LispFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LispPackage.MODEL: return createModel();
      case LispPackage.FORM: return createForm();
      case LispPackage.DEFINITION: return createDefinition();
      case LispPackage.EXPRESSION: return createExpression();
      case LispPackage.SET: return createSet();
      case LispPackage.IF: return createIf();
      case LispPackage.CONSTANT: return createConstant();
      case LispPackage.FORMALS: return createFormals();
      case LispPackage.VARIABLE_DEFINITION: return createVariableDefinition();
      case LispPackage.DEFINE: return createDefine();
      case LispPackage.VARIABLE: return createVariable();
      case LispPackage.BODY: return createBody();
      case LispPackage.SYNTAX_DEFINITION: return createSyntaxDefinition();
      case LispPackage.KEYWORD: return createKeyword();
      case LispPackage.SYNTAX_BINDING: return createSyntaxBinding();
      case LispPackage.IDENTIFIER: return createIdentifier();
      case LispPackage.INITIAL: return createInitial();
      case LispPackage.SUBSEQUENT: return createSubsequent();
      case LispPackage.LETTER: return createLetter();
      case LispPackage.DIGIT: return createDigit();
      case LispPackage.DECIMAL: return createDecimal();
      case LispPackage.NUMBER: return createNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Form createForm()
  {
    FormImpl form = new FormImpl();
    return form;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set createSet()
  {
    SetImpl set = new SetImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formals createFormals()
  {
    FormalsImpl formals = new FormalsImpl();
    return formals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDefinition createVariableDefinition()
  {
    VariableDefinitionImpl variableDefinition = new VariableDefinitionImpl();
    return variableDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SyntaxDefinition createSyntaxDefinition()
  {
    SyntaxDefinitionImpl syntaxDefinition = new SyntaxDefinitionImpl();
    return syntaxDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Keyword createKeyword()
  {
    KeywordImpl keyword = new KeywordImpl();
    return keyword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SyntaxBinding createSyntaxBinding()
  {
    SyntaxBindingImpl syntaxBinding = new SyntaxBindingImpl();
    return syntaxBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initial createInitial()
  {
    InitialImpl initial = new InitialImpl();
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subsequent createSubsequent()
  {
    SubsequentImpl subsequent = new SubsequentImpl();
    return subsequent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Letter createLetter()
  {
    LetterImpl letter = new LetterImpl();
    return letter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Digit createDigit()
  {
    DigitImpl digit = new DigitImpl();
    return digit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decimal createDecimal()
  {
    DecimalImpl decimal = new DecimalImpl();
    return decimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.t2.lisp.lisp.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LispPackage getLispPackage()
  {
    return (LispPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LispPackage getPackage()
  {
    return LispPackage.eINSTANCE;
  }

} //LispFactoryImpl
