/**
 * generated by Xtext 2.15.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.t2.lisp.lisp.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LispFactoryImpl extends EFactoryImpl implements LispFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LispFactory init()
  {
    try
    {
      LispFactory theLispFactory = (LispFactory)EPackage.Registry.INSTANCE.getEFactory(LispPackage.eNS_URI);
      if (theLispFactory != null)
      {
        return theLispFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LispFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LispFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LispPackage.MODEL: return createModel();
      case LispPackage.DEFINITION: return createDefinition();
      case LispPackage.BEGIN: return createBegin();
      case LispPackage.DEFINE: return createDefine();
      case LispPackage.LIST: return createList();
      case LispPackage.EXPRESSION: return createExpression();
      case LispPackage.NUMEROS: return createNumeros();
      case LispPackage.OPERACOES: return createOperacoes();
      case LispPackage.INTEIROS: return createInteiros();
      case LispPackage.DECIMAL: return createDecimal();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Begin createBegin()
  {
    BeginImpl begin = new BeginImpl();
    return begin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Numeros createNumeros()
  {
    NumerosImpl numeros = new NumerosImpl();
    return numeros;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operacoes createOperacoes()
  {
    OperacoesImpl operacoes = new OperacoesImpl();
    return operacoes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Inteiros createInteiros()
  {
    InteirosImpl inteiros = new InteirosImpl();
    return inteiros;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Decimal createDecimal()
  {
    DecimalImpl decimal = new DecimalImpl();
    return decimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LispPackage getLispPackage()
  {
    return (LispPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LispPackage getPackage()
  {
    return LispPackage.eINSTANCE;
  }

} //LispFactoryImpl
