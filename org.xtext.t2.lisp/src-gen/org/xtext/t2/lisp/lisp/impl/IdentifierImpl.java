/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Identifier;
import org.xtext.t2.lisp.lisp.Initial;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Subsequent;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Identifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IdentifierImpl#getInitial <em>Initial</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IdentifierImpl#getSubsequent <em>Subsequent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IdentifierImpl extends MinimalEObjectImpl.Container implements Identifier
{
  /**
   * The cached value of the '{@link #getInitial() <em>Initial</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitial()
   * @generated
   * @ordered
   */
  protected Initial initial;

  /**
   * The cached value of the '{@link #getSubsequent() <em>Subsequent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubsequent()
   * @generated
   * @ordered
   */
  protected Subsequent subsequent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IdentifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.IDENTIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initial getInitial()
  {
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitial(Initial newInitial, NotificationChain msgs)
  {
    Initial oldInitial = initial;
    initial = newInitial;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IDENTIFIER__INITIAL, oldInitial, newInitial);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial(Initial newInitial)
  {
    if (newInitial != initial)
    {
      NotificationChain msgs = null;
      if (initial != null)
        msgs = ((InternalEObject)initial).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IDENTIFIER__INITIAL, null, msgs);
      if (newInitial != null)
        msgs = ((InternalEObject)newInitial).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IDENTIFIER__INITIAL, null, msgs);
      msgs = basicSetInitial(newInitial, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IDENTIFIER__INITIAL, newInitial, newInitial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subsequent getSubsequent()
  {
    return subsequent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubsequent(Subsequent newSubsequent, NotificationChain msgs)
  {
    Subsequent oldSubsequent = subsequent;
    subsequent = newSubsequent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IDENTIFIER__SUBSEQUENT, oldSubsequent, newSubsequent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubsequent(Subsequent newSubsequent)
  {
    if (newSubsequent != subsequent)
    {
      NotificationChain msgs = null;
      if (subsequent != null)
        msgs = ((InternalEObject)subsequent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IDENTIFIER__SUBSEQUENT, null, msgs);
      if (newSubsequent != null)
        msgs = ((InternalEObject)newSubsequent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IDENTIFIER__SUBSEQUENT, null, msgs);
      msgs = basicSetSubsequent(newSubsequent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IDENTIFIER__SUBSEQUENT, newSubsequent, newSubsequent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.IDENTIFIER__INITIAL:
        return basicSetInitial(null, msgs);
      case LispPackage.IDENTIFIER__SUBSEQUENT:
        return basicSetSubsequent(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.IDENTIFIER__INITIAL:
        return getInitial();
      case LispPackage.IDENTIFIER__SUBSEQUENT:
        return getSubsequent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.IDENTIFIER__INITIAL:
        setInitial((Initial)newValue);
        return;
      case LispPackage.IDENTIFIER__SUBSEQUENT:
        setSubsequent((Subsequent)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.IDENTIFIER__INITIAL:
        setInitial((Initial)null);
        return;
      case LispPackage.IDENTIFIER__SUBSEQUENT:
        setSubsequent((Subsequent)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.IDENTIFIER__INITIAL:
        return initial != null;
      case LispPackage.IDENTIFIER__SUBSEQUENT:
        return subsequent != null;
    }
    return super.eIsSet(featureID);
  }

} //IdentifierImpl
