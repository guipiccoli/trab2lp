/**
 * generated by Xtext 2.15.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Definition;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Numeros;
import org.xtext.t2.lisp.lisp.Recursion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Recursion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.RecursionImpl#getRecursionID <em>Recursion ID</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.RecursionImpl#getRecursionInt <em>Recursion Int</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.RecursionImpl#getRecursionString <em>Recursion String</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.RecursionImpl#getRecursionDefinition <em>Recursion Definition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RecursionImpl extends MinimalEObjectImpl.Container implements Recursion
{
  /**
   * The default value of the '{@link #getRecursionID() <em>Recursion ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionID()
   * @generated
   * @ordered
   */
  protected static final String RECURSION_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRecursionID() <em>Recursion ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionID()
   * @generated
   * @ordered
   */
  protected String recursionID = RECURSION_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getRecursionInt() <em>Recursion Int</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionInt()
   * @generated
   * @ordered
   */
  protected Numeros recursionInt;

  /**
   * The default value of the '{@link #getRecursionString() <em>Recursion String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionString()
   * @generated
   * @ordered
   */
  protected static final String RECURSION_STRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRecursionString() <em>Recursion String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionString()
   * @generated
   * @ordered
   */
  protected String recursionString = RECURSION_STRING_EDEFAULT;

  /**
   * The cached value of the '{@link #getRecursionDefinition() <em>Recursion Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecursionDefinition()
   * @generated
   * @ordered
   */
  protected Definition recursionDefinition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecursionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.RECURSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRecursionID()
  {
    return recursionID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecursionID(String newRecursionID)
  {
    String oldRecursionID = recursionID;
    recursionID = newRecursionID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_ID, oldRecursionID, recursionID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Numeros getRecursionInt()
  {
    return recursionInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecursionInt(Numeros newRecursionInt, NotificationChain msgs)
  {
    Numeros oldRecursionInt = recursionInt;
    recursionInt = newRecursionInt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_INT, oldRecursionInt, newRecursionInt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecursionInt(Numeros newRecursionInt)
  {
    if (newRecursionInt != recursionInt)
    {
      NotificationChain msgs = null;
      if (recursionInt != null)
        msgs = ((InternalEObject)recursionInt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.RECURSION__RECURSION_INT, null, msgs);
      if (newRecursionInt != null)
        msgs = ((InternalEObject)newRecursionInt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.RECURSION__RECURSION_INT, null, msgs);
      msgs = basicSetRecursionInt(newRecursionInt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_INT, newRecursionInt, newRecursionInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRecursionString()
  {
    return recursionString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecursionString(String newRecursionString)
  {
    String oldRecursionString = recursionString;
    recursionString = newRecursionString;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_STRING, oldRecursionString, recursionString));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition getRecursionDefinition()
  {
    return recursionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecursionDefinition(Definition newRecursionDefinition, NotificationChain msgs)
  {
    Definition oldRecursionDefinition = recursionDefinition;
    recursionDefinition = newRecursionDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_DEFINITION, oldRecursionDefinition, newRecursionDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecursionDefinition(Definition newRecursionDefinition)
  {
    if (newRecursionDefinition != recursionDefinition)
    {
      NotificationChain msgs = null;
      if (recursionDefinition != null)
        msgs = ((InternalEObject)recursionDefinition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.RECURSION__RECURSION_DEFINITION, null, msgs);
      if (newRecursionDefinition != null)
        msgs = ((InternalEObject)newRecursionDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.RECURSION__RECURSION_DEFINITION, null, msgs);
      msgs = basicSetRecursionDefinition(newRecursionDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.RECURSION__RECURSION_DEFINITION, newRecursionDefinition, newRecursionDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.RECURSION__RECURSION_INT:
        return basicSetRecursionInt(null, msgs);
      case LispPackage.RECURSION__RECURSION_DEFINITION:
        return basicSetRecursionDefinition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.RECURSION__RECURSION_ID:
        return getRecursionID();
      case LispPackage.RECURSION__RECURSION_INT:
        return getRecursionInt();
      case LispPackage.RECURSION__RECURSION_STRING:
        return getRecursionString();
      case LispPackage.RECURSION__RECURSION_DEFINITION:
        return getRecursionDefinition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.RECURSION__RECURSION_ID:
        setRecursionID((String)newValue);
        return;
      case LispPackage.RECURSION__RECURSION_INT:
        setRecursionInt((Numeros)newValue);
        return;
      case LispPackage.RECURSION__RECURSION_STRING:
        setRecursionString((String)newValue);
        return;
      case LispPackage.RECURSION__RECURSION_DEFINITION:
        setRecursionDefinition((Definition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.RECURSION__RECURSION_ID:
        setRecursionID(RECURSION_ID_EDEFAULT);
        return;
      case LispPackage.RECURSION__RECURSION_INT:
        setRecursionInt((Numeros)null);
        return;
      case LispPackage.RECURSION__RECURSION_STRING:
        setRecursionString(RECURSION_STRING_EDEFAULT);
        return;
      case LispPackage.RECURSION__RECURSION_DEFINITION:
        setRecursionDefinition((Definition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.RECURSION__RECURSION_ID:
        return RECURSION_ID_EDEFAULT == null ? recursionID != null : !RECURSION_ID_EDEFAULT.equals(recursionID);
      case LispPackage.RECURSION__RECURSION_INT:
        return recursionInt != null;
      case LispPackage.RECURSION__RECURSION_STRING:
        return RECURSION_STRING_EDEFAULT == null ? recursionString != null : !RECURSION_STRING_EDEFAULT.equals(recursionString);
      case LispPackage.RECURSION__RECURSION_DEFINITION:
        return recursionDefinition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (recursionID: ");
    result.append(recursionID);
    result.append(", recursionString: ");
    result.append(recursionString);
    result.append(')');
    return result.toString();
  }

} //RecursionImpl
