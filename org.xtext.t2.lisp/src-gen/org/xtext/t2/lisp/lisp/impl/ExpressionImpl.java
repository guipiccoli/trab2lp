/**
 * generated by Xtext 2.15.0
 */
package org.xtext.t2.lisp.lisp.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Operacoes;
import org.xtext.t2.lisp.lisp.Recursion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.ExpressionImpl#getOperacoes <em>Operacoes</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.ExpressionImpl#getPrimeiro <em>Primeiro</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends DefinitionImpl implements Expression
{
  /**
   * The cached value of the '{@link #getOperacoes() <em>Operacoes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperacoes()
   * @generated
   * @ordered
   */
  protected Operacoes operacoes;

  /**
   * The cached value of the '{@link #getPrimeiro() <em>Primeiro</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimeiro()
   * @generated
   * @ordered
   */
  protected EList<Recursion> primeiro;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operacoes getOperacoes()
  {
    return operacoes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperacoes(Operacoes newOperacoes, NotificationChain msgs)
  {
    Operacoes oldOperacoes = operacoes;
    operacoes = newOperacoes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.EXPRESSION__OPERACOES, oldOperacoes, newOperacoes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperacoes(Operacoes newOperacoes)
  {
    if (newOperacoes != operacoes)
    {
      NotificationChain msgs = null;
      if (operacoes != null)
        msgs = ((InternalEObject)operacoes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.EXPRESSION__OPERACOES, null, msgs);
      if (newOperacoes != null)
        msgs = ((InternalEObject)newOperacoes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.EXPRESSION__OPERACOES, null, msgs);
      msgs = basicSetOperacoes(newOperacoes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.EXPRESSION__OPERACOES, newOperacoes, newOperacoes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Recursion> getPrimeiro()
  {
    if (primeiro == null)
    {
      primeiro = new EObjectContainmentEList<Recursion>(Recursion.class, this, LispPackage.EXPRESSION__PRIMEIRO);
    }
    return primeiro;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.EXPRESSION__OPERACOES:
        return basicSetOperacoes(null, msgs);
      case LispPackage.EXPRESSION__PRIMEIRO:
        return ((InternalEList<?>)getPrimeiro()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.EXPRESSION__OPERACOES:
        return getOperacoes();
      case LispPackage.EXPRESSION__PRIMEIRO:
        return getPrimeiro();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.EXPRESSION__OPERACOES:
        setOperacoes((Operacoes)newValue);
        return;
      case LispPackage.EXPRESSION__PRIMEIRO:
        getPrimeiro().clear();
        getPrimeiro().addAll((Collection<? extends Recursion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.EXPRESSION__OPERACOES:
        setOperacoes((Operacoes)null);
        return;
      case LispPackage.EXPRESSION__PRIMEIRO:
        getPrimeiro().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.EXPRESSION__OPERACOES:
        return operacoes != null;
      case LispPackage.EXPRESSION__PRIMEIRO:
        return primeiro != null && !primeiro.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
