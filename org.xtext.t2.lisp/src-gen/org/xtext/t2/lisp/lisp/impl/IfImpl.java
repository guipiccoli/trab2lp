/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Expression;
import org.xtext.t2.lisp.lisp.If;
import org.xtext.t2.lisp.lisp.LispPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IfImpl#getExpression5 <em>Expression5</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IfImpl#getExpression6 <em>Expression6</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IfImpl#getExpression7 <em>Expression7</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IfImpl#getExpression3 <em>Expression3</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.IfImpl#getExpression4 <em>Expression4</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfImpl extends MinimalEObjectImpl.Container implements If
{
  /**
   * The cached value of the '{@link #getExpression5() <em>Expression5</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression5()
   * @generated
   * @ordered
   */
  protected Expression expression5;

  /**
   * The cached value of the '{@link #getExpression6() <em>Expression6</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression6()
   * @generated
   * @ordered
   */
  protected Expression expression6;

  /**
   * The cached value of the '{@link #getExpression7() <em>Expression7</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression7()
   * @generated
   * @ordered
   */
  protected Expression expression7;

  /**
   * The cached value of the '{@link #getExpression3() <em>Expression3</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression3()
   * @generated
   * @ordered
   */
  protected Expression expression3;

  /**
   * The cached value of the '{@link #getExpression4() <em>Expression4</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression4()
   * @generated
   * @ordered
   */
  protected Expression expression4;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression5()
  {
    return expression5;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression5(Expression newExpression5, NotificationChain msgs)
  {
    Expression oldExpression5 = expression5;
    expression5 = newExpression5;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION5, oldExpression5, newExpression5);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression5(Expression newExpression5)
  {
    if (newExpression5 != expression5)
    {
      NotificationChain msgs = null;
      if (expression5 != null)
        msgs = ((InternalEObject)expression5).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION5, null, msgs);
      if (newExpression5 != null)
        msgs = ((InternalEObject)newExpression5).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION5, null, msgs);
      msgs = basicSetExpression5(newExpression5, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION5, newExpression5, newExpression5));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression6()
  {
    return expression6;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression6(Expression newExpression6, NotificationChain msgs)
  {
    Expression oldExpression6 = expression6;
    expression6 = newExpression6;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION6, oldExpression6, newExpression6);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression6(Expression newExpression6)
  {
    if (newExpression6 != expression6)
    {
      NotificationChain msgs = null;
      if (expression6 != null)
        msgs = ((InternalEObject)expression6).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION6, null, msgs);
      if (newExpression6 != null)
        msgs = ((InternalEObject)newExpression6).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION6, null, msgs);
      msgs = basicSetExpression6(newExpression6, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION6, newExpression6, newExpression6));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression7()
  {
    return expression7;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression7(Expression newExpression7, NotificationChain msgs)
  {
    Expression oldExpression7 = expression7;
    expression7 = newExpression7;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION7, oldExpression7, newExpression7);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression7(Expression newExpression7)
  {
    if (newExpression7 != expression7)
    {
      NotificationChain msgs = null;
      if (expression7 != null)
        msgs = ((InternalEObject)expression7).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION7, null, msgs);
      if (newExpression7 != null)
        msgs = ((InternalEObject)newExpression7).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION7, null, msgs);
      msgs = basicSetExpression7(newExpression7, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION7, newExpression7, newExpression7));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression3()
  {
    return expression3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression3(Expression newExpression3, NotificationChain msgs)
  {
    Expression oldExpression3 = expression3;
    expression3 = newExpression3;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION3, oldExpression3, newExpression3);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression3(Expression newExpression3)
  {
    if (newExpression3 != expression3)
    {
      NotificationChain msgs = null;
      if (expression3 != null)
        msgs = ((InternalEObject)expression3).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION3, null, msgs);
      if (newExpression3 != null)
        msgs = ((InternalEObject)newExpression3).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION3, null, msgs);
      msgs = basicSetExpression3(newExpression3, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION3, newExpression3, newExpression3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression4()
  {
    return expression4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression4(Expression newExpression4, NotificationChain msgs)
  {
    Expression oldExpression4 = expression4;
    expression4 = newExpression4;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION4, oldExpression4, newExpression4);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression4(Expression newExpression4)
  {
    if (newExpression4 != expression4)
    {
      NotificationChain msgs = null;
      if (expression4 != null)
        msgs = ((InternalEObject)expression4).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION4, null, msgs);
      if (newExpression4 != null)
        msgs = ((InternalEObject)newExpression4).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.IF__EXPRESSION4, null, msgs);
      msgs = basicSetExpression4(newExpression4, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.IF__EXPRESSION4, newExpression4, newExpression4));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.IF__EXPRESSION5:
        return basicSetExpression5(null, msgs);
      case LispPackage.IF__EXPRESSION6:
        return basicSetExpression6(null, msgs);
      case LispPackage.IF__EXPRESSION7:
        return basicSetExpression7(null, msgs);
      case LispPackage.IF__EXPRESSION3:
        return basicSetExpression3(null, msgs);
      case LispPackage.IF__EXPRESSION4:
        return basicSetExpression4(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.IF__EXPRESSION5:
        return getExpression5();
      case LispPackage.IF__EXPRESSION6:
        return getExpression6();
      case LispPackage.IF__EXPRESSION7:
        return getExpression7();
      case LispPackage.IF__EXPRESSION3:
        return getExpression3();
      case LispPackage.IF__EXPRESSION4:
        return getExpression4();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.IF__EXPRESSION5:
        setExpression5((Expression)newValue);
        return;
      case LispPackage.IF__EXPRESSION6:
        setExpression6((Expression)newValue);
        return;
      case LispPackage.IF__EXPRESSION7:
        setExpression7((Expression)newValue);
        return;
      case LispPackage.IF__EXPRESSION3:
        setExpression3((Expression)newValue);
        return;
      case LispPackage.IF__EXPRESSION4:
        setExpression4((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.IF__EXPRESSION5:
        setExpression5((Expression)null);
        return;
      case LispPackage.IF__EXPRESSION6:
        setExpression6((Expression)null);
        return;
      case LispPackage.IF__EXPRESSION7:
        setExpression7((Expression)null);
        return;
      case LispPackage.IF__EXPRESSION3:
        setExpression3((Expression)null);
        return;
      case LispPackage.IF__EXPRESSION4:
        setExpression4((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.IF__EXPRESSION5:
        return expression5 != null;
      case LispPackage.IF__EXPRESSION6:
        return expression6 != null;
      case LispPackage.IF__EXPRESSION7:
        return expression7 != null;
      case LispPackage.IF__EXPRESSION3:
        return expression3 != null;
      case LispPackage.IF__EXPRESSION4:
        return expression4 != null;
    }
    return super.eIsSet(featureID);
  }

} //IfImpl
