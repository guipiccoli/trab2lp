/**
 * generated by Xtext 2.17.0
 */
package org.xtext.t2.lisp.lisp.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.t2.lisp.lisp.Formals;
import org.xtext.t2.lisp.lisp.LispPackage;
import org.xtext.t2.lisp.lisp.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Formals</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.FormalsImpl#getVariable5 <em>Variable5</em>}</li>
 *   <li>{@link org.xtext.t2.lisp.lisp.impl.FormalsImpl#getVariable6 <em>Variable6</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FormalsImpl extends MinimalEObjectImpl.Container implements Formals
{
  /**
   * The cached value of the '{@link #getVariable5() <em>Variable5</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable5()
   * @generated
   * @ordered
   */
  protected Variable variable5;

  /**
   * The cached value of the '{@link #getVariable6() <em>Variable6</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable6()
   * @generated
   * @ordered
   */
  protected Variable variable6;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FormalsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LispPackage.Literals.FORMALS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable5()
  {
    return variable5;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable5(Variable newVariable5, NotificationChain msgs)
  {
    Variable oldVariable5 = variable5;
    variable5 = newVariable5;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.FORMALS__VARIABLE5, oldVariable5, newVariable5);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable5(Variable newVariable5)
  {
    if (newVariable5 != variable5)
    {
      NotificationChain msgs = null;
      if (variable5 != null)
        msgs = ((InternalEObject)variable5).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.FORMALS__VARIABLE5, null, msgs);
      if (newVariable5 != null)
        msgs = ((InternalEObject)newVariable5).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.FORMALS__VARIABLE5, null, msgs);
      msgs = basicSetVariable5(newVariable5, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.FORMALS__VARIABLE5, newVariable5, newVariable5));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable6()
  {
    return variable6;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable6(Variable newVariable6, NotificationChain msgs)
  {
    Variable oldVariable6 = variable6;
    variable6 = newVariable6;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LispPackage.FORMALS__VARIABLE6, oldVariable6, newVariable6);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable6(Variable newVariable6)
  {
    if (newVariable6 != variable6)
    {
      NotificationChain msgs = null;
      if (variable6 != null)
        msgs = ((InternalEObject)variable6).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LispPackage.FORMALS__VARIABLE6, null, msgs);
      if (newVariable6 != null)
        msgs = ((InternalEObject)newVariable6).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LispPackage.FORMALS__VARIABLE6, null, msgs);
      msgs = basicSetVariable6(newVariable6, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LispPackage.FORMALS__VARIABLE6, newVariable6, newVariable6));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LispPackage.FORMALS__VARIABLE5:
        return basicSetVariable5(null, msgs);
      case LispPackage.FORMALS__VARIABLE6:
        return basicSetVariable6(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LispPackage.FORMALS__VARIABLE5:
        return getVariable5();
      case LispPackage.FORMALS__VARIABLE6:
        return getVariable6();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LispPackage.FORMALS__VARIABLE5:
        setVariable5((Variable)newValue);
        return;
      case LispPackage.FORMALS__VARIABLE6:
        setVariable6((Variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.FORMALS__VARIABLE5:
        setVariable5((Variable)null);
        return;
      case LispPackage.FORMALS__VARIABLE6:
        setVariable6((Variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LispPackage.FORMALS__VARIABLE5:
        return variable5 != null;
      case LispPackage.FORMALS__VARIABLE6:
        return variable6 != null;
    }
    return super.eIsSet(featureID);
  }

} //FormalsImpl
